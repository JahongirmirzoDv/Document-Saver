package uz.mobiledv.test1.model

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName // May not be needed if column names match property names

@Serializable
data class Folder(
    // In Supabase, 'id' is often a UUID generated by Postgres or specified by you.
    // If your table's primary key is 'id', this matches.
    var id: String = "", // Or Int if you use serial PK
    var name: String = "",
    var description: String = "",

    @SerialName("user_id") // Or created_by, ensure this matches your table column name
    var userId: String = "", // The ID of the user who created it

    @SerialName("created_at") // Supabase tables often have a 'created_at' timestamp
    var createdAt: String? = null, // Timestamptz from Postgres, often ISO 8601 string

    // Permissions in Supabase are typically handled by Row Level Security (RLS) policies
    // rather than an array in the document itself.
    // val permissions: List<String>? = null // This might be removed or handled differently
) {
    // You might not need a specific toSupabaseCreateData() if you use Postgrest's `insert`
    // with the whole object, but it can be useful for controlling what's sent.
    fun toSupabaseCreateData(): Map<String, Any?> {
        return mapOf(
            "name" to name,
            "description" to description,
            "user_id" to userId
            // 'id' and 'created_at' are often handled by Postgres
        )
    }
}
// AppwriteFolderList is no longer needed. Postgrest returns List<Folder> directly.