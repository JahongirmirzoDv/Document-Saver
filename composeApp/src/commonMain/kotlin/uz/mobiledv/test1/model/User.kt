// Located in: jahongirmirzodv/test.1.2/Test.1.2-e8bc22d6ec882d29fdc4fa507b210d7398d64cde/composeApp/src/commonMain/kotlin/uz/mobiledv/test1/model/User.kt
package uz.mobiledv.test1.model

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Transient

@Serializable
data class User(
    // Supabase GoTrue typically uses a UUID string for user IDs.
    // This might come from the `id` field of the Supabase User object.
    // For a custom table, you can define it as UUID or an auto-incrementing Int.
    // Let's assume UUID generated by the database or client.
    var id: String = "", // Ensure this matches your 'users' table primary key
    var username: String? = null, // For username-based login
    val email: String? = null, // Can be unique identifier
    @SerialName("is_admin")
    var isAdmin: Boolean = false, // To differentiate admin (desktop) and regular users

    // This field will store the HASHED password in the database.
    // When a new user signs up, hash their password before storing.
    // When a user logs in, hash their input password and compare with this stored hash.
    // DO NOT STORE PLAIN TEXT PASSWORDS.
    @SerialName("password_hash") // Name in the database table
    var passwordHash: String? = null,

    @SerialName("created_at")
    var createdAt: String? = null, // Optional: timestamp

    // This field is for client-side operations (e.g., during sign-up or login attempt)
    // and should NOT be directly serialized to/from the database in plain text.
    @Transient // Mark as transient so it's not automatically part of Postgrest serialization
    val transientPasswordForOps: String? = null

    // val phoneNumber: String? = null, // Supabase supports phone auth
    // val userMetadata: UserMetadata? = null // Example for custom data
) {
    fun toSupabaseCreateData(): Map<String, Any?> {
        return mapOf(
            "id" to id.ifBlank { null }, // Let DB generate if blank, or provide UUID
            "username" to username,
            "email" to email,
            "is_admin" to isAdmin, // Ensure column name matches DB (e.g., is_admin)
            "password_hash" to passwordHash
            // "created_at" is often handled by Postgres default
        ).filterValues { it != null }
    }

    fun toSupabaseUpdateData(): Map<String, Any?> {
        return mapOf(
            "username" to username,
            "email" to email,
            "is_admin" to isAdmin,
            "password_hash" to passwordHash // Only if password is being changed
        ).filterValues { it != null }
    }
}

// @Serializable
// data class UserMetadata( // Example structure for data in user_metadata or profiles table
//    val displayName: String? = null,
//    val isAdmin: Boolean? = null
//    // Add other custom fields
// )

// SensitiveStringSerializer might not be needed if we use @Transient for the password used in operations.
// object SensitiveStringSerializer : kotlinx.serialization.KSerializer<String?> {
//    override val descriptor = kotlinx.serialization.descriptors.PrimitiveSerialDescriptor(
//        "SensitiveString",
//        kotlinx.serialization.descriptors.PrimitiveKind.STRING
//    )
//    override fun serialize(encoder: kotlinx.serialization.encoding.Encoder, value: String?) {
//        encoder.encodeNull() // Or handle as needed, e.g., throw error if attempted to serialize
//    }
//    override fun deserialize(decoder: kotlinx.serialization.encoding.Decoder): String? = decoder.decodeString()
// }